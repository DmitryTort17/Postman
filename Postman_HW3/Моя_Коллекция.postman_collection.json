{
	"info": {
		"_postman_id": "75dd048a-a15d-4da4-a9e7-449b2bf51129",
		"name": "Моя_Коллекция",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21725282"
	},
	"item": [
		{
			"name": "HW_3",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// спарсил запрос\r",
									"let req_data = JSON.parse(request.data)\r",
									"console.log(req_data)\r",
									"// спарсил ответ\r",
									"let resp_data = pm.response.json()\r",
									"console.log(resp_data)\r",
									"\r",
									"let token = resp_data.token\r",
									"// передал токен в окружение\r",
									"pm.environment.set(\"auth_token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"dmitry17\",\r\n    \"login\": \"qwerty\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры json в ответе.\r",
									"const schema = pm.response.json()\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"let req_data = JSON.parse(request.data)\r",
									"let salary = req_data.salary\r",
									"let resp_data = pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"check qa_salary_after_12_months\", function () {\r",
									"    pm.expect(salary * 2.9).to.eql(resp_data.qa_salary_after_12_months);\r",
									"});\r",
									"\r",
									"pm.test(\"check qa_salary_after_6_months\", function () {\r",
									"    pm.expect(salary * 2).to.eql(resp_data.qa_salary_after_6_months);\r",
									"});\r",
									"\r",
									"pm.test(\"check start_qa_salary\", function () {\r",
									"    pm.expect(salary).to.eql(resp_data.start_qa_salary);\r",
									"});\r",
									"\r",
									"pm.test(\"check u_salary_1_5_year\", function () {\r",
									"    pm.expect(salary * 4).to.eql(resp_data.person.u_salary_1_5_year);\r",
									"});\r",
									"\r",
									"\r",
									"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"pm.environment.set(\"u_salary_1_5_year\", resp_data.person.u_salary_1_5_year);\r",
									"// name в окружение\r",
									"pm.environment.set(\"Name\", req_data.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 25,\r\n    \"salary\": 10000,\r\n    \"name\": \"Dmitry\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Парсинг запроса и ответа\r",
									"let resp_data = pm.response.json()\r",
									"console.log(resp_data)\r",
									"let req_data = request.data\r",
									"console.log(req_data)\r",
									"\r",
									"// Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"salary coefficient check 1\", function () {\r",
									"    pm.expect(resp_data.salary[0]).to.eql(10000 * 1);\r",
									"});\r",
									"\r",
									"pm.test(\"salary coefficient check 2\", function () {\r",
									"    pm.expect(parseInt(resp_data.salary[1])).to.eql(10000 * 2);\r",
									"});\r",
									"\r",
									"pm.test(\"salary coefficient check 3\", function () {\r",
									"    pm.expect(parseInt(resp_data.salary[2])).to.eql(10000 * 3);\r",
									"});\r",
									"\r",
									"// проверить, что 2-й элемент массива salary больше 1-го и 0-го (вариант 1)\r",
									"let first_comparison = (resp_data.salary[2]) > (resp_data.salary[1])\r",
									"console.log(first_comparison)\r",
									"pm.test(\"first_comparison is true\")\r",
									"    pm.expect(first_comparison).to.eql(true)\r",
									"\r",
									"let second_comparison = (resp_data.salary[2]) > (resp_data.salary[0])\r",
									"console.log(second_comparison)\r",
									"pm.test(\"second_comparison is true\")\r",
									"    pm.expect(second_comparison).to.eql(true)\r",
									"\r",
									"//проверить, что 2-й элемент массива salary больше 1-го и 0-го (вариант 2)\r",
									"pm.test(\"Salary[2] is greater than Salary[0] and Salary[1]\")\r",
									"\tpm.expect(Number(resp_data.salary[2])).to.be.greaterThan(resp_data.salary[0]).and.greaterThan(Number(resp_data.salary[1]))\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "10000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Dmitry",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"// Парсинг запроса и ответа\r",
									"let resp_data = pm.response.json()\r",
									"console.log(resp_data)\r",
									"let req_data = request.data\r",
									"console.log(req_data)\r",
									"\r",
									"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"check daily_food\")\r",
									"    pm.expect(resp_data.daily_food).to.eql(req_data.weight * 0.012)\r",
									"\r",
									"pm.test(\"check daily_sleep\")\r",
									"    pm.expect(resp_data.daily_sleep).to.eql(req_data.weight * 2.5)\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "70",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Dmitry",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры json в ответе.\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"// Парсинг запроса и ответа\r",
									"let resp_data = pm.response.json()\r",
									"console.log(resp_data)\r",
									"let req_data = request.data\r",
									"console.log(req_data)\r",
									"\r",
									"// Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test(\"name_resp = name.env\")\r",
									"    pm.expect(resp_data.name).to.eql(pm.environment.get(\"Name\"))\r",
									"\r",
									"// Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age \r",
									"pm.test(\"age_resp = age.env\")\r",
									"    pm.expect(resp_data.age).to.eql(req_data.age)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "10000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Dmitry",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсим ответ\r",
									"let resp_data = pm.response.json()\r",
									"var curr_code = Math.floor(Math.random()*resp_data.length)\r",
									"console.log(curr_code)\r",
									"// Передаем curr_code в окружение\r",
									"pm.environment.set(\"curr_code\", curr_code);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверка структуры json в ответе.\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "b802d2d5-152b-4807-b4e2-4fea84426eeb",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{curr_code}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}