{
	"info": {
		"_postman_id": "75dd048a-a15d-4da4-a9e7-449b2bf51129",
		"name": "Моя_Коллекция",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21725282"
	},
	"item": [
		{
			"name": "HW_2",
			"item": [
				{
					"name": "First",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Отправить запрос\r",
									"pm.sendRequest(\"http://162.55.220.72:5005/first\", function (err, response) {\r",
									"});\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body is string\", function () {\r",
									"  pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"});\r",
									"\r",
									"//Проверить, что в body приходит есть необходимая информация.\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce \");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=\"Dmitry\"&age=25",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "\"Dmitry\""
								},
								{
									"key": "age",
									"value": "25"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.\r",
									"let response_data = pm.response.json()\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Check User name\", function () {\r",
									"    pm.expect(response_data.name).to.eql(\"Дмитрий\");\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Check age\", function () {\r",
									"    pm.expect(response_data.age).to.eql(\"25\");\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Check salary\", function () {\r",
									"    pm.expect(response_data.salary).to.eql(10000);\r",
									"});\r",
									"\r",
									"//Спарсить request.\r",
									"let request_data = request.data\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"console.log(request_data)\r",
									"console.log(request_data.name)\r",
									"console.log(response_data.name)\r",
									"pm.test(\"Check req.name = resp.name\", function () {\r",
									"    pm.expect(request_data.name).to.eql(response_data.name)\r",
									"});   \r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Check req.age = resp.age\", function () {\r",
									"    pm.expect(request_data.age).to.eql(response_data.age)\r",
									"}); \r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"console.log(request_data.salary, response_data.salary)\r",
									"pm.test(\"Check req.salary = resp.salary\", function () {\r",
									"    pm.expect(+request_data.salary).to.eql(response_data.salary)\r",
									"}); \r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(response_data.family)\r",
									"\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"console.log(request_data.salary*4, response_data.family.u_salary_1_5_year)\r",
									"pm.test(\"Check u_salary_1_5_year = 4*salary\", function () {\r",
									"    pm.expect(request_data.salary*4).to.eql(response_data.family.u_salary_1_5_year)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Дмитрий",
									"type": "text"
								},
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "10000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name={{name}}&age={{age}}&weight=70",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "weight",
									"value": "70"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Дмитрий&age=25&salary=10000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Дмитрий"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Отправить запрос\r",
									"pm.sendRequest(\"http://162.55.220.72:5005/object_info_3\", function (err, response) {\r",
									"});\r",
									"// Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let response_data = pm.response.json()\r",
									"console.log(response_data)\r",
									"\r",
									"//Спарсить request.\r",
									"let request_data = pm.request.url.query.toObject();\r",
									"console.log(request_data)\r",
									"\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"let req_name = pm.request.url.query.get(\"name\") // можно не задавать переменную, использовать request_data.name\r",
									"console.log(req_name)\r",
									"console.log(response_data.name, req_name)\r",
									"pm.test(\"Check req.name = resp.name\", function () {\r",
									"    pm.expect(req_name).to.eql(response_data.name)\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Check req.age = resp.age\", function () {\r",
									"    pm.expect(request_data.age).to.eql(response_data.age)\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Check req.salary = resp.salary\", function () {\r",
									"    pm.expect(+request_data.salary).to.eql(response_data.salary)\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(response_data.family)\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"console.log(response_data.family)\r",
									"pm.test(\"Check dog have Name\", function () {\r",
									"    pm.expect(response_data.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры age\r",
									"pm.test(\"Check dog have Age\", function () {\r",
									"    pm.expect(response_data.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"let Name_dog = response_data.family.pets.dog.name\r",
									"console.log(Name_dog)\r",
									"pm.test(\"dog name = Luky\", function () {\r",
									"    pm.expect(Name_dog).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"let age_dog = response_data.family.pets.dog.age\r",
									"console.log(age_dog)\r",
									"pm.test(\"dog age = Luky\", function () {\r",
									"    pm.expect(age_dog).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitry&age=25&salary=10000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Dmitry"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Отправить запрос\r",
									"pm.sendRequest(\"http://162.55.220.72:5005/object_info_4?name=Dmitry&age=25&salary=10000\", function (err, response) {\r",
									"    console.log(response.json());\r",
									"});\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json\r",
									"let resp_data = pm.response.json()\r",
									"console.log(resp_data)\r",
									"//Спарсить request.\r",
									"let req_data = pm.request.url.query.toObject() \r",
									"console.log(req_data)\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"req_name = resp_name\", function () {\r",
									"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"let req_age = parseInt(req_data.age)\r",
									"console.log(req_age)\r",
									"pm.test(\"req_age = resp_age\", function () {\r",
									"    pm.expect(resp_data.age).to.eql(req_age);\r",
									"});\r",
									"\r",
									"\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(req_data.salary)\r",
									"\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log(resp_data.salary)\r",
									"\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(resp_data.salary[0])\r",
									"\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
									"console.log(resp_data.salary[1])\r",
									"\r",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
									"console.log(resp_data.salary[2])\r",
									"\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"let req_salary = parseInt(req_data.salary)\r",
									"pm.test(\"req_salary = resp_salary\", function () {\r",
									"    pm.expect(resp_data.salary[0]).to.eql(req_salary);\r",
									"});\r",
									"\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"let req_salary2 = parseInt(resp_data.salary[1])\r",
									"pm.test(\"req_salary[1] = resp_salary*2\", function () {\r",
									"    pm.expect(req_salary2).to.eql(req_salary*2);\r",
									"});\r",
									"\r",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"let req_salary3 = parseInt(resp_data.salary[2])\r",
									"pm.test(\"req_salary[2] = resp_salary*3\", function () {\r",
									"    pm.expect(req_salary3).to.eql(req_salary*3);\r",
									"});\r",
									"\r",
									"//Создать в окружении переменную name\r",
									"pm.environment.set(\"name\");\r",
									"\r",
									"//Создать в окружении переменную age\r",
									"pm.environment.set(\"age\");\r",
									"\r",
									"//Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary_ep6\");\r",
									"\r",
									"//Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", resp_data.name);\r",
									"\r",
									"//Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", resp_data.age);\r",
									"\r",
									"//Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary_ep6\", resp_data.salary);\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"let arrey = resp_data.salary\r",
									"let n = 0\r",
									"while (n < 3) {\r",
									"   console.log (arrey[n]);\r",
									"   n += 1\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Dmitry&age=25&salary=10000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Dmitry"
								},
								{
									"key": "age",
									"value": "25"
								},
								{
									"key": "salary",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//4. Отправить запрос. \r",
									"pm.sendRequest(\"http://162.55.220.72:5005/user_info_2\");\r",
									"\r",
									"//5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//6. Спарсить response body в json.\r",
									"let resp_data = pm.response.json()\r",
									"\r",
									"//7. Спарсить request.\r",
									"let req_data = pm.request.data\r",
									"\r",
									"//8. Проверить, что json response имеет параметр start_qa_salary\r",
									"console.log(resp_data)\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(resp_data).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"response has status key qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"qa_salary_after_6_months\");\r",
									"});\r",
									"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"//13. Проверить, что json response имеет параметр person\r",
									"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//4. Отправить запрос. \r",
									"pm.sendRequest(\"http://162.55.220.72:5005/user_info_2\");\r",
									"\r",
									"//5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//6. Спарсить response body в json.\r",
									"let resp_data = pm.response.json()\r",
									"\r",
									"//7. Спарсить request.\r",
									"let req_data = request.data\r",
									"\r",
									"//8. Проверить, что json response имеет параметр start_qa_salary\r",
									"console.log(resp_data)\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(resp_data).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"pm.test(\"response has status key start_qa_salary\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"response has status key qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"response has status key qa_salary_after_12_months\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"response has status key qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"response has status key qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"\r",
									"//13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"response has status key person\", function () {\r",
									"    pm.expect(resp_data).haveOwnProperty(\"person\");\r",
									"});\r",
									"\r",
									"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"req_salary = resp_salary\", function () { \r",
									"    pm.expect(resp_data.start_qa_salary).to.equal(parseInt(req_data.salary)); \r",
									"});\r",
									"\r",
									"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_6_months = 2*req_salary\", function () { \r",
									"    pm.expect(resp_data.qa_salary_after_6_months).is.to.equal(2*req_data.salary); \r",
									"});\r",
									"\r",
									"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_12_months = 2.7*req_salary\", function () { \r",
									"    pm.expect(resp_data.qa_salary_after_12_months).is.to.equal(2.7*req_data.salary); \r",
									"});\r",
									"\r",
									"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_1.5_years = 3.3*req_salary\", function () { \r",
									"    pm.expect(resp_data[\"qa_salary_after_1.5_year\"]).to.eql(req_data.salary*3.3); \r",
									"});\r",
									"\r",
									"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"qa_salary_after_3.5_years = 3.8*req_salary\", function () { \r",
									"    pm.expect(resp_data[\"qa_salary_after_3.5_years\"]).to.eql(req_data.salary*3.8); \r",
									"});\r",
									"\r",
									"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"u_name[0] = req_salary\", function () { \r",
									"    pm.expect(resp_data.person.u_name[1]).to.eql(parseInt(req_data.salary)); \r",
									"});\r",
									"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"u_age = req_age\", function () { \r",
									"    pm.expect(resp_data.person.u_age).to.eql(parseInt(req_data.age)); \r",
									"});\r",
									"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"u_salary_5_years = 4.2*req_salary\", function () { \r",
									"    pm.expect(resp_data.person.u_salary_5_years).to.eql(req_data.salary*4.2); \r",
									"});\r",
									"\r",
									"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"let person = [resp_data.person.u_age, resp_data.person.u_name, resp_data.person.u_salary_5_years]\r",
									"let n = 0\r",
									"while (n < 3) {\r",
									"   console.log (person[n]);\r",
									"   n += 1\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}